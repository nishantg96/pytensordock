{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyTensordock API Reference","text":"class <p>Initialize the TensorDockAPIWrapper.</p> Parameters <ul> <li><code>api_key</code> (str) \u2014 The API key for authentication.</li> <li><code>api_token</code> (str) \u2014 The API token for authentication.</li> </ul> Methods <ul> <li><code>delete_server</code><code>(</code><code>server_uuid</code><code>)</code> (dict) \u2014 Create a request to delete a server.</li> <li><code>deploy_machine</code><code>(</code><code>name</code>, <code>gpu_count</code>, <code>gpu_model</code>, <code>vcpus</code>, <code>ram</code>, <code>external_ports</code>, <code>internal_ports</code>, <code>hostnode</code>, <code>storage</code>, <code>operating_system</code>, <code>password</code>, <code>deployment_type</code>, <code>cpu_model</code>, <code>location</code>, <code>cloudinit_script</code>, <code>price_type</code>, <code>price</code><code>)</code> (dict(str: any)) \u2014 This endpoint allows a single deployment of a machine, based on parameters you control. Pass in, via the REST body, the following variables., as shown with some examples</li> <li><code>get_specific_hostnode</code><code>(</code><code>id</code><code>)</code> (dict) \u2014 Instead of returning all available hostnodes, you can also return the information of a specific one based on its UUID.</li> <li><code>get_vm_details</code><code>(</code><code>server_uuid</code><code>)</code> (dict) \u2014 Retrieve the details of a specific virtual machine.</li> <li><code>list_authorizations</code><code>(</code><code>)</code> (dict(str: any)) \u2014 Get a list of all authorizations.</li> <li><code>list_available_hostnodes</code><code>(</code><code>min_vcpus</code>, <code>min_ram</code>, <code>min_storage</code>, <code>min_vram</code>, <code>min_gpu_count</code>, <code>requires_rtx</code>, <code>requires_gtx</code><code>)</code> (dict) \u2014 This gets a list of all available hostnodes and stock for GPUs. These hostnodes are categorized as \"local storage\". \"Network storage\" GPUs can be provisioned by following the instructions listed under the deployment endpoint. You will need to keep track of the GPU model and available CPU/RAM for the deployment step. All params are optional, but can be added to filter for certain hostnodes.</li> <li><code>list_virtual_machines</code><code>(</code><code>)</code> (dict) \u2014 List all current virtual machines registered under an organization.</li> <li><code>modify_server</code><code>(</code><code>server_uuid</code>, <code>gpu_model</code>, <code>gpu_count</code>, <code>ram</code>, <code>vcpus</code>, <code>storage</code><code>)</code> (dict) \u2014 Modify the specifications of a virtual machine. Your virtual machine must be of type \"network storage\" and stopped before modifying.</li> <li><code>retrieve_balance</code><code>(</code><code>)</code> (dict) \u2014 Through this endpoint, you can easily retrieve your current balance and spending rate to monitor your balance.</li> <li><code>soft_validate_existing_spot_instance</code><code>(</code><code>server</code>, <code>price</code><code>)</code> (dict) \u2014 To validate if an existing VM, modified to this price, will succeed, you can send this request.</li> <li><code>soft_validate_new_spot_instance</code><code>(</code><code>gpu_count</code>, <code>gpu_model</code>, <code>vcpus</code>, <code>hostnode</code>, <code>ram</code>, <code>storage</code>, <code>price</code><code>)</code> (dict) \u2014 To validate if an interruptible instance of a given price will succeed, you can send this request.</li> <li><code>start_server</code><code>(</code><code>vm_uuid</code><code>)</code> (dict) \u2014 Create a request to start a server on an authorization.</li> <li><code>stop_server</code><code>(</code><code>server_uuid</code>, <code>disassociate_resources</code><code>)</code> (dict) \u2014 Create a request to stop a server on an authorization. If the server is stopped without releasing the GPU, it will be billed at the same rate as a running server. If the GPU is released, it will only be billed for the storage costs.</li> <li><code>test_authorization</code><code>(</code><code>)</code> (dict) \u2014 Here you can test that an authorization is registered and working.</li> </ul> method <p>Create a request to stop a server on an authorization. If the server is stopped without releasing the GPU, it will be billed at the same rate as a running server. If the GPU is released, it will only be billed for the storage costs.</p> Parameters <ul> <li><code>server_uuid</code> (str) \u2014 The UUID of the server to stop.</li> <li><code>disassociate_resources</code> (bool) \u2014 Optional - set to \"True\" if you want to release the GPU when stopping the VM.</li> </ul> Returns (dict) <p>The JSON response.</p> method <p>Create a request to start a server on an authorization.</p> Parameters <ul> <li><code>vm_uuid</code> (str) \u2014 The UUID of the virtual machine to start.</li> </ul> Returns (dict) <p>The JSON response.</p> method <p>Modify the specifications of a virtual machine. Your virtual machine must be of type \"network storage\" and stopped before modifying.</p> Parameters <ul> <li><code>server_uuid</code> (str) \u2014 The UUID of the virtual machine to modify.</li> <li><code>gpu_model</code> (str) \u2014 You can get available GPU models on a hostnode from the hostnodes list API endpoint. Examples: geforcertx3090-pcie-24gb, rtxa6000-pcie-48gb, etc.</li> <li><code>gpu_count</code> (int) \u2014 Number of GPUs.</li> <li><code>ram</code> (int) \u2014 RAM amount.</li> <li><code>vcpus</code> (int) \u2014 Number of vCPUs.</li> <li><code>storage</code> (int) \u2014 Storage amount.</li> </ul> Returns (dict) <p>The JSON response.</p> method <p>Create a request to delete a server.</p> Parameters <ul> <li><code>server_uuid</code> (str) \u2014 The UUID of the virtual machine to delete.</li> </ul> Returns (dict) <p>The JSON response.</p> method <p>List all current virtual machines registered under an organization.</p> Returns (dict) <p>The JSON response.</p> method <p>Retrieve the details of a specific virtual machine.</p> Parameters <ul> <li><code>server_uuid</code> (str) \u2014 The UUID of the virtual machine to retrieve details.</li> </ul> Returns (dict) <p>The JSON response.</p> method <p>To validate if an interruptible instance of a given price will succeed, you can send this request.</p> <p>If the \"success\" field is false, then you must bid higher and confirm that enough resources are available. If the \"success\" field is true, then a deployment of the resources you selected will succeed.</p> Parameters <ul> <li><code>gpu_count</code> (int) \u2014 Number of GPUs.</li> <li><code>gpu_model</code> (str) \u2014 GPU model.</li> <li><code>vcpus</code> (int) \u2014 Number of vCPUs.</li> <li><code>hostnode</code> (str) \u2014 Hostnode ID.</li> <li><code>ram</code> (int) \u2014 RAM amount.</li> <li><code>storage</code> (int) \u2014 Storage amount.</li> <li><code>price</code> (float) \u2014 Bid price for the spot instance.</li> </ul> Returns (dict) <p>The JSON response.</p> method <p>To validate if an existing VM, modified to this price, will succeed, you can send this request.</p> <p>If the \"success\" field is false, then you must bid higher and confirm that enough resources are available. If the \"success\" field is true, then your VM will start with the new price (or your VM will continue to run at the new price).</p> Parameters <ul> <li><code>server</code> (str) \u2014 The UUID of the virtual machine to validate.</li> <li><code>price</code> (float) \u2014 Bid price for the spot instance.</li> </ul> Returns (dict) <p>The JSON response.</p> method <p>This endpoint allows a single deployment of a machine, based on parameters you control. Pass in, via the REST body, the following variables., as shown with some examples</p> <p>Ports should be sent as a list structed with curly braces with commas and spaces as separators of the ports themselves. The first index of the externally requested port will forward into the first index of the internally requested port, and so on... You can view available ports for each machine through the hostnodes list API.</p> <p>Args:     name (str): Name of your VM to be displayed in the dashboard     gpu_count (int): Number of GPUs.     gpu_model (str): You can get available GPU models on a hostnode from the hostnodes list API endpoint. Examples: geforcertx3090-pcie-24gb, rtxa6000-pcie-48gb, etc.     vcpus (int): Number of vCPUs.     ram (int): RAM amount.     external_ports (list): External port mappings.     internal_ports (list): Internal port mappings.     hostnode (str): Hostnode ID.     storage (int): Storage amount.     operating_system (str): Operating system.     password (str): Password for the virtual machine.     deployment_type (str): Optional field to specify either a \"network\" or \"local\" deployment. For CPU-only deployments, use \"network\". Defaults to \"local\".     cpu_model (str): Required if deploying a CPU-only server.     location (str): Required if deployment type is \"network\". Can be either \"New York City, New York, United States\", \"Chicago, Illinois, United States\", or \"Las Vegas, Nevada, United States\".     cloudinit_script (str): String of text to append to our cloud-init script, with newlines substituted for</p> <pre><code>price_type (str): Optional field to deploy a spot instance.\nprice (float): Optional field to set bid amount for spot deployment.\n</code></pre> <p>Returns:     dict: The JSON response.</p> method <p>This gets a list of all available hostnodes and stock for GPUs. These hostnodes are categorized as \"local storage\". \"Network storage\" GPUs can be provisioned by following the instructions listed under the deployment endpoint. You will need to keep track of the GPU model and available CPU/RAM for the deployment step. All params are optional, but can be added to filter for certain hostnodes.</p> <p>Note: If you include your organization's API key and token in the request, like such:</p> <p>https://marketplace.tensordock.com/api/v0/client/deploy/hostnodes?api_key=KEY&amp;api_token=TOKEN</p> <p>Hostnodes that are reserved for your organization will also show up in the list.</p> Parameters <ul> <li><code>min_vcpus</code> (int) \u2014 Minimum number of vCPUs.</li> <li><code>min_ram</code> (int) \u2014 Minimum amount of RAM.</li> <li><code>min_storage</code> (int) \u2014 Minimum SSD storage amount in GB.</li> <li><code>min_vram</code> (int) \u2014 Minimum VRAM amount.</li> <li><code>min_gpu_count</code> (int) \u2014 Minimum number of GPUs.</li> <li><code>requires_rtx</code> (bool) \u2014 Requires RTX GPU.</li> <li><code>requires_gtx</code> (bool) \u2014 Requires GTX GPU.</li> </ul> Returns (dict) <p>The JSON response.</p> method <p>Get a list of all authorizations.</p> method <p>Through this endpoint, you can easily retrieve your current balance and spending rate to monitor your balance.</p> <p>Remember, once your balance runs out, your servers are automatically deleted \u2014 so please constantly monitor and understand your billing situation to ensure that this does not occur.</p> Returns (dict) <p>The JSON response.</p> method <p>Here you can test that an authorization is registered and working.</p> <p>Simply pass in your API key as api_key and API token as api_token, and confirm that we return true!</p> <p>We will return an object {\"success\": true} if your authorization key and token are valid.</p> Returns (dict) <p>The JSON response.</p> method <p>Instead of returning all available hostnodes, you can also return the information of a specific one based on its UUID.</p> Parameters <ul> <li><code>id</code> (str) \u2014 The ID of the hostnode.</li> </ul> Returns (dict) <p>The JSON response.</p>"},{"location":"#pytensordockapitensordockwrapper","title":"<code>pytensordock.api.</code><code>TensorDockWrapper</code><code>(</code><code>api_key</code>, <code>api_token</code>, <code>debug=False</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrapperstop_server","title":"<code>stop_server</code><code>(</code><code>server_uuid</code>, <code>disassociate_resources=True</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrapperstart_server","title":"<code>start_server</code><code>(</code><code>vm_uuid</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrappermodify_server","title":"<code>modify_server</code><code>(</code><code>server_uuid</code>, <code>gpu_model</code>, <code>gpu_count</code>, <code>ram</code>, <code>vcpus</code>, <code>storage</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrapperdelete_server","title":"<code>delete_server</code><code>(</code><code>server_uuid</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrapperlist_virtual_machines","title":"<code>list_virtual_machines</code><code>(</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrapperget_vm_details","title":"<code>get_vm_details</code><code>(</code><code>server_uuid</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrappersoft_validate_new_spot_instance","title":"<code>soft_validate_new_spot_instance</code><code>(</code><code>gpu_count</code>, <code>gpu_model</code>, <code>vcpus</code>, <code>hostnode</code>, <code>ram</code>, <code>storage</code>, <code>price</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrappersoft_validate_existing_spot_instance","title":"<code>soft_validate_existing_spot_instance</code><code>(</code><code>server</code>, <code>price</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrapperdeploy_machine","title":"<code>deploy_machine</code><code>(</code><code>name</code>, <code>gpu_count</code>, <code>gpu_model</code>, <code>vcpus</code>, <code>ram</code>, <code>external_ports</code>, <code>internal_ports</code>, <code>hostnode</code>, <code>storage</code>, <code>operating_system</code>, <code>password</code>, <code>deployment_type='local'</code>, <code>cpu_model=None</code>, <code>location=None</code>, <code>cloudinit_script=None</code>, <code>price_type=None</code>, <code>price=None</code><code>)</code> \u2192 dict(str: any)","text":""},{"location":"#pytensordockapitensordockwrapperlist_available_hostnodes","title":"<code>list_available_hostnodes</code><code>(</code><code>min_vcpus=None</code>, <code>min_ram=None</code>, <code>min_storage=None</code>, <code>min_vram=None</code>, <code>min_gpu_count=None</code>, <code>requires_rtx=None</code>, <code>requires_gtx=None</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrapperlist_authorizations","title":"<code>list_authorizations</code><code>(</code><code>)</code> \u2192 dict(str: any)","text":""},{"location":"#pytensordockapitensordockwrapperretrieve_balance","title":"<code>retrieve_balance</code><code>(</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrappertest_authorization","title":"<code>test_authorization</code><code>(</code><code>)</code>","text":""},{"location":"#pytensordockapitensordockwrapperget_specific_hostnode","title":"<code>get_specific_hostnode</code><code>(</code><code>id</code><code>)</code>","text":""}]}